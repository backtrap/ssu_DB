목차
 2.1 관계형 데이터 모델
 2.2 샘플 대학교 데이터 베이스
 2.3 관계 대수
 2.4 추가 관계 대수


 * 관계형 데이터 모델
데이터베이스를 관계와 무결정 제약의 묶음으로 표현
 1. 관계 relation
 2. 무결성 제약 integrity constraint
 3. 묶음 collection

수학적 이론 중 집합이론, 일차 수학논리를 사용
현재 상용 데이터베이스 시스템은 관계형 데이터 모델 기반이 가장 많다


 * 관계 예제
우리가 흔히 보는 테이블 형식
속성과 튜플로 구성

속성은 속성 헤드를 가진다

 1. 속성 attribute
 2. 튜플 tuple
 3. 속성 헤드 atrribute head

 동의어들
관계 = 테이블 (relation = table)
튜플 = 레코드 (행) (tuple = record)
속성 = 칼럼 (열) (attribute = column)


 * 도메인
속성 값으로 허용할 수 있는 값의 집합

속성 값은 도메인의 원소
속성 값은 원자 값이어야 한다 (atomic)

각 도메인 널 값을 디폴트로 가진다 (null, default)
널 값은 값이 없는 것을 의미

속성 값이 입력되지 않으면 널 값으로 표시한다


 * 원자값
더 이상 분해할 수 없다는 뜻

관계형 모델에서 문자열은 원자 값이다
군집 데이터를 정의하는 집합, 백, 리스트 값은 원자 값이 아니다


 * 관계 스키마
테이블에서 가장 윗줄 (첫 행)

속성명들이 있는 줄
관계 이름과 속성명 나열을 의미


 *관계 인스턴스
튜플들의 집합
관계 스카마에 적합한 값의 조합을 가진 것
각 속성 도메인 값의 모든 조합에서 일부분(부분집합)을 가진다

도메인의 카테시안 곱의 부분집합


 * 관계형 데이터베이스
데이터베이스가 관계와 제약 조건으로 구성
 1. 관계
 2. 제약 조건

 무결성 제약 (integrity constraint)
 1. 키 제약
 2. 엔티티 제약
 3. 참조 무결성 제약 등

 키 제약
주 키는 중복된 값을 가지지 못한다

 엔티티 제약
주 키는 널 값을 가지지 못한다


 * 주 키 (primary key)
주 키는 중복된 값을 가지지 못한다
주 키는 속성 중에서 고른다

테이블에서 주 키가 여러개일 경우
해당 주 키의 속성은 중복되어 튜플에 나타날 수 있다

그러나 이 때 여러 주 키를 연결한 전체 값이 주 키가 되므로
이 조합은 항상 유일하여야 한다


 * 참조 무결성 제약
테이블에서의 화살 표시

 외래 키 (foreign key)
다른 테이블의 속성을 참조한다


 * 관계형 데이터베이스에서 순서는 중요하지 않다
관계 간에는 순서는 없다
튜플 간에는 순서는 없다
상하관계 역시 없다


 * 키
무언가를 식별하는 고유한 식별자 기능

조건에 만족하는 관계의 행을 찾거나 순서대로 정렬할 때
다른 행과 구별할 수 있는 기준
여러 속성의 조합이기도 하다

키의 종류
 1. 주 키 (primary key)
 2. 슈퍼 키 (super key)
 3. 후보 키 (candidate key)
 4. 대체 키 (alternate key)
 5. 외래 키 (foreign key)


 * 유일성
하나의 키 값으로 하나의 튜플만을 유일하게 식별할 수 있어야 한다


 * 희소성
키를 구성하는 속성 하나를 제거하면
유일하게 식별할 수 없도록 꼭 필요한 최소한의 속성으로 구성되어야 한다

키는 하나의 속성으로 구성되지 않는다


 * 슈퍼 키
관계에서 튜플을 유일하게 식별할 수 있는 속성의 집합
ex) 주민등록번호, 학번

유일성은 만족하나
최소성은 만족하지 못한다
(주민등록번호 + 학번의 조합일 수도 있다는 것)


 * 후보 키
각 행을 유일하게 식별할 수 있는 최소한의 속성들의 집합
슈퍼 키의 유일성을 유지하면서
가장 적은 수의 속성으로 구성된 키

유일성과 최소성을 동시에 만족한다
여러개가 존재할 수 있다

후보 키는 기본 키가 될 수 있는 후보들


 * 주 키 (기본 키)
여러 후보키 중에서 하나를 선택한 키로
최소성과 유일성을 만족하는 속성

테이블 안에서 유일하게 각 튜플을 구별할 수 있도록 쓰인다

테이블에서 주 키는 오직 1개만 지정 가능
널 값을 가질 수 없고
중복된 값을 가질 수 없다

 
 * 대체 키
후보 키 중에서 선택된 기본 키를 제외한 나무지 후보 키를 의미



 * 외래 키
다른 테이블의 데이터를 참조하여
테이블간의 관계를 연결

참조될 속성은 그 테이블에서 주 키로 설정되어 있어야 한다

 1. 참조되는 부모 테이블
 2. 참조하는 자식 테이블


 * Minimal 속성 
유일성을 유지하면서 가장 적은 속성
후보 키가 될 수 있다

관계에 하나 이상의 후보 키가 존재하면
설계자가 그 중 하나를 주 키로 지정하면 된다


(키 그림 사진 첨부)


 * 참조 무결성 제약 (referential integrity constraint)
특정 속성에 나타나는 모든 값은
반드시 다른 속성에도 나타나야 한다

특정 속성에 나타나는 모든 값은
다른 속성 값의 일부분이어야 한다

즉, 외래 키가 다른 테이블을 참조할 때 
외래 키의 값은 참조되는 테이블에 존재하는 값 중 하나이어야 한다

또한 참조 받는 속성은 반드시 그 테이블의 주 키이어야 한다


 * 데이터 사전
메타 데이터를 관리

데이터 사전 내용
 1. 릴레이션 이름
 2. 속성의 이름, 타입, 길이
 3. 사용자 정의 이름
 4. 무결성 제약
 5. 유저, 계정 정보 (비밀번호 포함)
 6. 기술 통계적인 데이터
 7. 물리적인 파일 조직 정보 (테이블 저장 방법, 물리적인 테이블 저장 위치)

사용자는 SQL 언어를 활용하여
데이터 사전에 속하는 데이터에 접근할 수 있다


(p35 메타 데이터 사례 사진)


 * 관계 대수
관계와 제약 사항에 대한 연산 제공
관계 대수를 통하여 데이터베이스로부터 구하고자 하는 정보를
데이터베이스 시스템에 요청할 수 있다

상용 데이터베이스 시스템은 관계 대수를 직접적으로 제공하지 않고
SQL 언어를 사용자에게 제공한다

관계 대수는 데이터베이스 시스템 내부에서 사용되는 언어로
사용자에게 직접 보이지 않는다


 * 관계 대수 기본 연산
 1. 선택 select
 2. 투영 project
 3. 합집합 union
 4. 차집합 set difference
 5. 카테시안 곱 cartesian product
 6. 재명명 rename


 * 관계 대수 확장 연산
 1. 할당 assignment
 2. 교집합 set intersection
 3. 자연 조인 natural join
 4. 세타 조인 theta-join
 5. 동등 조인 equal-join
 6. 외부 조인 outer join
 7. 나눔 연산 division operation


확장 관계 연산자는
기본 관계 연산자를 조합하여 만들 수 있다


 * 선택 연산
σ 선택 조건 (테이블명)
selection 연산

주어진 조건을 만족하는 튜플을 생성
선택 연산의 결과물은 새로운 테이블이다

각 항은 ∧ (and), ∨ (or), ¬(not) 등으로 연결 가능

ex) σ deptName="CS" (professor)
ㄴ professor 테이블에서 속성 deptName의 값이 CS인 튜플로 이루어진 테이블을 생성하라
σ


 * 투영 연산
Π 속성명1, 속성명2 (테이블명)
projection 연산

테이블에서 임의의 속성을 선택하는 연산
테이블에서 명시된 속성만을 보여줌

투영 후에 중복된 튜플은 제거돼서
동일한 튜플이 두 번 이상 나타나지 않는다

결과 테이블은 항상 튜플의 집합이다

ex) Π pID, name, salary (professor)
ㄴ professor 테이블에서 속성 pID, name, salary로만 구성된 테이블을 만들어라


 * 관계 대수의 집합 연산
테이블을 집합으로 보고
튜플을 테이블의 원소로 본다

관계 대수 집합 연산이 유효하려면
튜플의 속성 개수가 동일해야 하고
대응되는 속성의 도메인이 상호 호환적이어야 한다


 * 합집합 연산
테이블명1 ∪ 테이블명2


 * 차집합 연산
테이블명1 - 테이블명2

테이블명 2 - 테이블명1
두 연산의 결과는 다르다


 * 카테시안곱 연산
테이블명1 × 테이블명2

튜플의 모든 가능한 조합을 결과로 산출
두 테이블에서 나올 수 있는 모든 결과를 산출

테이블 r1의 속성 개수가 n1개이고 튜플 개수가 k1개이고,
테이블 r2의 속성 개수가 n2개이고 튜플 개수가 k2개일 떄
r1 × r2의 속성 개수는 n1+n2개이고
r1 × r2의 튜플 개수는 k1×k2개이다

(p44 카테시안곱 연산 결과 사진)


 * 재명명 연산
ρ 테이블명1(속성명1, 속성명2) (테이블명2)

테이블명2를 테이블명1로 변경하고
속성명도 차례로 속성명1, 속성명2로 변경한다

테이블명만 변경할 때는 첫 괄호()는 생략 가능하다

rename 연산
테이블명 or 속성명만 재명명 가능


기본 관계 대수 연산을 이용하여
복잡한 관계 대수식을 만들 수 있다

기본적으로 새로운 테이블을 만든다고 생각하자


 * 할당 연산
테이블명1 ← 테이블명2

테이블명2를 테이블명1에 할당
테이블명2가 복잡할 때 사용하여
복잡한 식 대신 간단하게 테이블명1만을 사용할 수 있다

복잡한 질의문을 작성할 때
중간 결과 표현을 임시로 저장할 수 있다


 * 교집합 연산
테이블명1 ∩ 테이블명2

테이블명1 ∩ 테이블명2
= 테이블명1 - (테이블명1 - 테이블명2)


 * 자연 조인
테이블명1 ⨝ 테이블명2
테이블명1 ⨝조인조건 테이블명2

입력 테이블에 대하여
 1. 카테시안곱을 수행하고
 2. 조인 조건을 이용하여 선택 연산을 수행하고
 3. 조인 조건에 언급된 속성을 이용하여 투영 연산을 수행한다

즉 카테시안곱 -> 선택 연산 -> 투영 연산
을 차례로 진행
Π(σ())라 생각

 1. 세타 조인은 카테시안곱 결과에서 조인 조건을 적용하여 출력
 2. 동등 조인은 조인 조건이 동등 조건임을 의미
 3. 자연 조인은 동등 조인 중에서 중복되는 속성을 투영 연산으로 제거한 것

자연 조인을 할 때 조인 조건을 명시하지 않으면
같은 이름의 속성이 조인 속성이 되어
동일 이름을 가지는 속성 간에 자연 조인을 수행한다

만약 동일을 가지는 속성 중에서 일부 속성만으로 조인 조건을 사용하려면
속성 이름을 재명명하거나
조인 조건을 명시적으로 표시해야 한다

동일한 속성명을 구분하기 위해서
테이블명.속성명 형식을 사용한다
ex) myProfessor ⨝myProfessor.pID>myTeacher.pID myProfessor
ㄴ ⨝ 뒤에 붙은 myProfessor.pID>myTeacher.pID이 조인 조건을 의미한다

두 테이블의 속성이 겹치지 않게 출력

선택 연산과 투영 연산 방법 차이에 따라
세 가지 내부 조인으로 구분할 수 있다

다른 관계 대수 연산에 비하여 시간이 많이 소요되는
비싼 연산

자연 조인 연산은 결합성과 교환성이 있다


 * 조인
 1. 내부 조인 inner join
  (1) 세타 조인 theta join
  (2) 동등 조인 equi-join
  (3) 자연 조인 natural join
 2. 외부 조인 outer join


 * 세타 조인 theta join
가장 일반적인 조인 연산
조인 조건을 원하는 목적에 맞춰서 작성한다

 1. 두 테이블을 카테시안 곱하고
 2. 그 결과에 대하여 조인 조건을 적용한다

ex) myProfessor ⨝myProfessor.pID>myTeacher.pID myProfessor


 * 동등 조인 equi-join
세타 조인 중에서
조인 조건이 동등 조건만으로 구성되는 경우

ex) myProfessor ⨝myProfessor.pID=myTeacher.pID myProfessor


 * 자연 조인 natural join
동등 조인 종에서
조인 조건 속성이 조인 결과에 한번만 나오는 경우


(내부 조인 관계도 그림)


 * 외부 조인 outer join
조인 조건을 만족시키지 않는 튜플도
결과 테이블에 포함시킨다
이 때 널 값을 넣는다

보다 많은 튜플 정보를
결과 테이블에 유지할 수 있다

내부 조인은 조인 조건을 만족시키지 않는 튜플은
결과 테이블에서 배제시킨다

 1. 왼쪽 외부 조인 left outer join (⟕)
 2. 오른쪽 외부 조인 right outer join (⟖)
 3. 완전 외부 조인 fully outer join (⟗)

왼쪽 외부 조인은
왼쪽에 오는 입력 테이블의 모든 튜플을 결과 테이블에 포함시킨다

오른쪽 외부 조인은
오른쪽에 오는 입력 테이블의 모든 튜플을 결과 테이블에 포함시킨다

완전 외부 조인은
오른쪽 외부 조인과 왼쪽 외부 조인을 합친 연산이다


 * 나눔 연산 division
테이블명1 ÷ 테이블명2

 1. 테이블명1에서 테이블명2의 속성값을 가지고 있는 튜플을 찾아서
 2. 공통 속성을 제외한 나머지 속성들로 구성된 튜플을 리턴

이 때 중복된 값은 하나만 작성한다

테이블명1의 튜플 중에서
테이블명2의 공통 속성에 속하는 모든 튜플을 가진다

테이블명1의 튜플 중에서
테이블명2의 속성을 모두 가지고 있는 튜플을 구한다

(나눔 연산 예제 사진)


 * 나눔 연산 의미
전체 정량자에 대응되는 질의를 구현한다

 전체 정량자 universal quantifier
모든 조건을 포함

카테시안곱, 투영, 차집합을 사용하여 표현 가능


카테시안 곱의 재명명에 대한 공부가 더 필요해 보인다